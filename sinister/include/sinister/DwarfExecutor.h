//===-- DWARFExecutor.h
//----------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines functions that can be used for parallel code generation.
//
//===----------------------------------------------------------------------===//

#include <vector>

#include "lldb/Core/Value.h"
#include "lldb/Expression/DWARFExpression.h"
#include "lldb/lldb-private.h"

namespace sinister {

class DwarfExecutor {
public:
  DwarfExecutor() = default;

  bool SetProgram(std::vector<uint8_t> *Data);

  llvm::Expected<lldb_private::Scalar>
  EvaluateProgram(lldb::ModuleSP module_sp = {}, DWARFUnit *unit = nullptr,
                  lldb_private::ExecutionContext *exe_ctx = nullptr);

private:
  std::unique_ptr<std::vector<uint8_t>> Program = nullptr; // DWARF program bytes
  std::unique_ptr<lldb_private::DataExtractor>
      Extractor; // To be passed the program, then passed to lldb's evaluate()
  lldb_private::Value Result; // Holds evaluate result
  lldb_private::Status
      ErrStatus; // Holds any error generated by call to ldb's evaluate()
  std::string ErrorMsg;
};
} // namespace sinister
